package cookiejar.skinned_lanterns.common.block;

import cookiejar.skinned_lanterns.common.lib.BlockNameLibrary;
import cookiejar.skinned_lanterns.common.lib.LocationLibrary;
import cookiejar.skinned_lanterns.core.platform.Services;
import net.minecraft.core.Registry;
import net.minecraft.resources.ResourceLocation;
import net.minecraft.world.item.BlockItem;
import net.minecraft.world.item.Item;
import net.minecraft.world.level.block.Block;
import net.minecraft.world.level.block.Blocks;
import net.minecraft.world.level.block.state.BlockBehaviour;

import java.util.function.BiConsumer;

/**
 * @author StevenPlayzz
 */
public class ModBlocks {
    public static final Block PUFFERFISH_LANTERN_BLOCK = new FaceableSkinnedLanternBlock(BlockBehaviour.Properties.copy(Blocks.LANTERN));
    public static final Block PUFFERFISH_SOUL_LANTERN_BLOCK = new FaceableSkinnedLanternBlock(BlockBehaviour.Properties.copy(Blocks.SOUL_LANTERN));
    public static final Block ZOMBIE_LANTERN_BLOCK = new FaceableSkinnedLanternBlock(BlockBehaviour.Properties.copy(Blocks.LANTERN));
    public static final Block ZOMBIE_SOUL_LANTERN_BLOCK = new FaceableSkinnedLanternBlock(BlockBehaviour.Properties.copy(Blocks.SOUL_LANTERN));
    public static final Block CREEPER_LANTERN_BLOCK = new FaceableSkinnedLanternBlock(BlockBehaviour.Properties.copy(Blocks.LANTERN));
    public static final Block CREEPER_SOUL_LANTERN_BLOCK = new FaceableSkinnedLanternBlock(BlockBehaviour.Properties.copy(Blocks.SOUL_LANTERN));
    public static final Block SKELETON_LANTERN_BLOCK = new FaceableSkinnedLanternBlock(BlockBehaviour.Properties.copy(Blocks.LANTERN));
    public static final Block SKELETON_SOUL_LANTERN_BLOCK = new FaceableSkinnedLanternBlock(BlockBehaviour.Properties.copy(Blocks.SOUL_LANTERN));
    public static final Block WITHER_SKELETON_LANTERN_BLOCK = new FaceableSkinnedLanternBlock(BlockBehaviour.Properties.copy(Blocks.LANTERN));
    public static final Block WITHER_SKELETON_SOUL_LANTERN_BLOCK = new FaceableSkinnedLanternBlock(BlockBehaviour.Properties.copy(Blocks.SOUL_LANTERN));
    public static final Block BEE_LANTERN_BLOCK = new FaceableSkinnedLanternBlock(BlockBehaviour.Properties.copy(Blocks.LANTERN));
    public static final Block BEE_SOUL_LANTERN_BLOCK = new FaceableSkinnedLanternBlock(BlockBehaviour.Properties.copy(Blocks.SOUL_LANTERN));
    public static final Block JACK_O_LANTERN_LANTERN_BLOCK = new FaceableSkinnedLanternBlock(BlockBehaviour.Properties.copy(Blocks.LANTERN));
    public static final Block JACK_O_LANTERN_SOUL_LANTERN_BLOCK = new FaceableSkinnedLanternBlock(BlockBehaviour.Properties.copy(Blocks.SOUL_LANTERN));
    public static final Block PAPER_WHITE_LANTERN_BLOCK = new SkinnedLanternBlock(BlockBehaviour.Properties.copy(Blocks.LANTERN));
    public static final Block PAPER_WHITE_SOUL_LANTERN_BLOCK = new SkinnedLanternBlock(BlockBehaviour.Properties.copy(Blocks.SOUL_LANTERN));

    public static final Block GHOST_LANTERN_BLOCK = new FaceableSkinnedLanternBlock(BlockBehaviour.Properties.copy(Blocks.LANTERN));
    public static final Block GHOST_SOUL_LANTERN_BLOCK = new FaceableSkinnedLanternBlock(BlockBehaviour.Properties.copy(Blocks.SOUL_LANTERN));
    public static final Block BLINKY_LANTERN_BLOCK = new FaceableSkinnedLanternBlock(BlockBehaviour.Properties.copy(Blocks.LANTERN));
    public static final Block BLINKY_SOUL_LANTERN_BLOCK = new FaceableSkinnedLanternBlock(BlockBehaviour.Properties.copy(Blocks.SOUL_LANTERN));
    public static final Block PINKY_LANTERN_BLOCK = new FaceableSkinnedLanternBlock(BlockBehaviour.Properties.copy(Blocks.LANTERN));
    public static final Block PINKY_SOUL_LANTERN_BLOCK = new FaceableSkinnedLanternBlock(BlockBehaviour.Properties.copy(Blocks.SOUL_LANTERN));
    public static final Block INKY_LANTERN_BLOCK = new FaceableSkinnedLanternBlock(BlockBehaviour.Properties.copy(Blocks.LANTERN));
    public static final Block INKY_SOUL_LANTERN_BLOCK = new FaceableSkinnedLanternBlock(BlockBehaviour.Properties.copy(Blocks.SOUL_LANTERN));
    public static final Block CLYDE_LANTERN_BLOCK = new FaceableSkinnedLanternBlock(BlockBehaviour.Properties.copy(Blocks.LANTERN));
    public static final Block CLYDE_SOUL_LANTERN_BLOCK = new FaceableSkinnedLanternBlock(BlockBehaviour.Properties.copy(Blocks.SOUL_LANTERN));
    public static final Block PACMAN_LANTERN_BLOCK = new FaceableSkinnedLanternBlock(BlockBehaviour.Properties.copy(Blocks.LANTERN));
    public static final Block PACMAN_SOUL_LANTERN_BLOCK = new FaceableSkinnedLanternBlock(BlockBehaviour.Properties.copy(Blocks.SOUL_LANTERN));
    public static final Block GUARDIAN_LANTERN_BLOCK = new FaceableSkinnedLanternBlock(BlockBehaviour.Properties.copy(Blocks.LANTERN));
    public static final Block GUARDIAN_SOUL_LANTERN_BLOCK = new FaceableSkinnedLanternBlock(BlockBehaviour.Properties.copy(Blocks.SOUL_LANTERN));
    public static final Block PAPER_YELLOW_LANTERN_BLOCK = new SkinnedLanternBlock(BlockBehaviour.Properties.copy(Blocks.LANTERN));
    public static final Block PAPER_YELLOW_SOUL_LANTERN_BLOCK = new SkinnedLanternBlock(BlockBehaviour.Properties.copy(Blocks.SOUL_LANTERN));
    public static final Block PAPER_ORANGE_LANTERN_BLOCK = new SkinnedLanternBlock(BlockBehaviour.Properties.copy(Blocks.LANTERN));
    public static final Block PAPER_ORANGE_SOUL_LANTERN_BLOCK = new SkinnedLanternBlock(BlockBehaviour.Properties.copy(Blocks.SOUL_LANTERN));
    public static final Block PAPER_BLUE_LANTERN_BLOCK = new SkinnedLanternBlock(BlockBehaviour.Properties.copy(Blocks.LANTERN));
    public static final Block PAPER_BLUE_SOUL_LANTERN_BLOCK = new SkinnedLanternBlock(BlockBehaviour.Properties.copy(Blocks.SOUL_LANTERN));
    public static final Block PAPER_LIGHT_BLUE_LANTERN_BLOCK = new SkinnedLanternBlock(BlockBehaviour.Properties.copy(Blocks.LANTERN));
    public static final Block PAPER_LIGHT_BLUE_SOUL_LANTERN_BLOCK = new SkinnedLanternBlock(BlockBehaviour.Properties.copy(Blocks.SOUL_LANTERN));
    public static final Block PAPER_CYAN_LANTERN_BLOCK = new SkinnedLanternBlock(BlockBehaviour.Properties.copy(Blocks.LANTERN));
    public static final Block PAPER_CYAN_SOUL_LANTERN_BLOCK = new SkinnedLanternBlock(BlockBehaviour.Properties.copy(Blocks.SOUL_LANTERN));
    public static final Block PAPER_LIME_LANTERN_BLOCK = new SkinnedLanternBlock(BlockBehaviour.Properties.copy(Blocks.LANTERN));
    public static final Block PAPER_LIME_SOUL_LANTERN_BLOCK = new SkinnedLanternBlock(BlockBehaviour.Properties.copy(Blocks.SOUL_LANTERN));
    public static final Block PAPER_GREEN_LANTERN_BLOCK = new SkinnedLanternBlock(BlockBehaviour.Properties.copy(Blocks.LANTERN));
    public static final Block PAPER_GREEN_SOUL_LANTERN_BLOCK = new SkinnedLanternBlock(BlockBehaviour.Properties.copy(Blocks.SOUL_LANTERN));
    public static final Block PAPER_LANTERN_BLOCK = new SkinnedLanternBlock(BlockBehaviour.Properties.copy(Blocks.LANTERN));
    public static final Block PAPER_SOUL_LANTERN_BLOCK = new SkinnedLanternBlock(BlockBehaviour.Properties.copy(Blocks.SOUL_LANTERN));
    public static final Block PAPER_PINK_LANTERN_BLOCK = new SkinnedLanternBlock(BlockBehaviour.Properties.copy(Blocks.LANTERN));
    public static final Block PAPER_PINK_SOUL_LANTERN_BLOCK = new SkinnedLanternBlock(BlockBehaviour.Properties.copy(Blocks.SOUL_LANTERN));
    public static final Block PAPER_BROWN_LANTERN_BLOCK = new SkinnedLanternBlock(BlockBehaviour.Properties.copy(Blocks.LANTERN));
    public static final Block PAPER_BROWN_SOUL_LANTERN_BLOCK = new SkinnedLanternBlock(BlockBehaviour.Properties.copy(Blocks.SOUL_LANTERN));
    public static final Block PAPER_BLACK_LANTERN_BLOCK = new SkinnedLanternBlock(BlockBehaviour.Properties.copy(Blocks.LANTERN));
    public static final Block PAPER_BLACK_SOUL_LANTERN_BLOCK = new SkinnedLanternBlock(BlockBehaviour.Properties.copy(Blocks.SOUL_LANTERN));
    public static final Block PAPER_GRAY_LANTERN_BLOCK = new SkinnedLanternBlock(BlockBehaviour.Properties.copy(Blocks.LANTERN));
    public static final Block PAPER_GRAY_SOUL_LANTERN_BLOCK = new SkinnedLanternBlock(BlockBehaviour.Properties.copy(Blocks.SOUL_LANTERN));
    public static final Block PAPER_LIGHT_GRAY_LANTERN_BLOCK = new SkinnedLanternBlock(BlockBehaviour.Properties.copy(Blocks.LANTERN));
    public static final Block PAPER_LIGHT_GRAY_SOUL_LANTERN_BLOCK = new SkinnedLanternBlock(BlockBehaviour.Properties.copy(Blocks.SOUL_LANTERN));
    public static final Block PAPER_MAGENTA_LANTERN_BLOCK = new SkinnedLanternBlock(BlockBehaviour.Properties.copy(Blocks.LANTERN));
    public static final Block PAPER_MAGENTA_SOUL_LANTERN_BLOCK = new SkinnedLanternBlock(BlockBehaviour.Properties.copy(Blocks.SOUL_LANTERN));
    public static final Block PAPER_PURPLE_LANTERN_BLOCK = new SkinnedLanternBlock(BlockBehaviour.Properties.copy(Blocks.LANTERN));
    public static final Block PAPER_PURPLE_SOUL_LANTERN_BLOCK = new SkinnedLanternBlock(BlockBehaviour.Properties.copy(Blocks.SOUL_LANTERN));

    public static final Block ORNAMENT_RED_LANTERN_BLOCK = new SkinnedLanternBlock(BlockBehaviour.Properties.copy(Blocks.LANTERN));
    public static final Block ORNAMENT_RED_SOUL_LANTERN_BLOCK = new SkinnedLanternBlock(BlockBehaviour.Properties.copy(Blocks.SOUL_LANTERN));
    public static final Block ORNAMENT_BLUE_LANTERN_BLOCK = new SkinnedLanternBlock(BlockBehaviour.Properties.copy(Blocks.LANTERN));
    public static final Block ORNAMENT_BLUE_SOUL_LANTERN_BLOCK = new SkinnedLanternBlock(BlockBehaviour.Properties.copy(Blocks.SOUL_LANTERN));
    public static final Block ORNAMENT_PURPLE_LANTERN_BLOCK = new SkinnedLanternBlock(BlockBehaviour.Properties.copy(Blocks.LANTERN));
    public static final Block ORNAMENT_PURPLE_SOUL_LANTERN_BLOCK = new SkinnedLanternBlock(BlockBehaviour.Properties.copy(Blocks.SOUL_LANTERN));
    public static final Block ORNAMENT_LIME_LANTERN_BLOCK = new SkinnedLanternBlock(BlockBehaviour.Properties.copy(Blocks.LANTERN));
    public static final Block ORNAMENT_LIME_SOUL_LANTERN_BLOCK = new SkinnedLanternBlock(BlockBehaviour.Properties.copy(Blocks.SOUL_LANTERN));
    public static final Block ORNAMENT_MAGENTA_LANTERN_BLOCK = new SkinnedLanternBlock(BlockBehaviour.Properties.copy(Blocks.LANTERN));
    public static final Block ORNAMENT_MAGENTA_SOUL_LANTERN_BLOCK = new SkinnedLanternBlock(BlockBehaviour.Properties.copy(Blocks.SOUL_LANTERN));
    public static final Block ORNAMENT_YELLOW_LANTERN_BLOCK = new SkinnedLanternBlock(BlockBehaviour.Properties.copy(Blocks.LANTERN));
    public static final Block ORNAMENT_YELLOW_SOUL_LANTERN_BLOCK = new SkinnedLanternBlock(BlockBehaviour.Properties.copy(Blocks.SOUL_LANTERN));
    public static final Block ORNAMENT_GREEN_LANTERN_BLOCK = new SkinnedLanternBlock(BlockBehaviour.Properties.copy(Blocks.LANTERN));
    public static final Block ORNAMENT_GREEN_SOUL_LANTERN_BLOCK = new SkinnedLanternBlock(BlockBehaviour.Properties.copy(Blocks.SOUL_LANTERN));
    public static final Block ORNAMENT_LIGHT_BLUE_LANTERN_BLOCK = new SkinnedLanternBlock(BlockBehaviour.Properties.copy(Blocks.LANTERN));
    public static final Block ORNAMENT_LIGHT_BLUE_SOUL_LANTERN_BLOCK = new SkinnedLanternBlock(BlockBehaviour.Properties.copy(Blocks.SOUL_LANTERN));
    public static final Block ORNAMENT_CYAN_LANTERN_BLOCK = new SkinnedLanternBlock(BlockBehaviour.Properties.copy(Blocks.LANTERN));
    public static final Block ORNAMENT_CYAN_SOUL_LANTERN_BLOCK = new SkinnedLanternBlock(BlockBehaviour.Properties.copy(Blocks.SOUL_LANTERN));
    public static final Block ORNAMENT_PINK_LANTERN_BLOCK = new SkinnedLanternBlock(BlockBehaviour.Properties.copy(Blocks.LANTERN));
    public static final Block ORNAMENT_PINK_SOUL_LANTERN_BLOCK = new SkinnedLanternBlock(BlockBehaviour.Properties.copy(Blocks.SOUL_LANTERN));
    public static final Block ORNAMENT_ORANGE_LANTERN_BLOCK = new SkinnedLanternBlock(BlockBehaviour.Properties.copy(Blocks.LANTERN));
    public static final Block ORNAMENT_ORANGE_SOUL_LANTERN_BLOCK = new SkinnedLanternBlock(BlockBehaviour.Properties.copy(Blocks.SOUL_LANTERN));
    public static final Block ORNAMENT_BROWN_LANTERN_BLOCK = new SkinnedLanternBlock(BlockBehaviour.Properties.copy(Blocks.LANTERN));
    public static final Block ORNAMENT_BROWN_SOUL_LANTERN_BLOCK = new SkinnedLanternBlock(BlockBehaviour.Properties.copy(Blocks.SOUL_LANTERN));
    public static final Block ORNAMENT_BLACK_LANTERN_BLOCK = new SkinnedLanternBlock(BlockBehaviour.Properties.copy(Blocks.LANTERN));
    public static final Block ORNAMENT_BLACK_SOUL_LANTERN_BLOCK = new SkinnedLanternBlock(BlockBehaviour.Properties.copy(Blocks.SOUL_LANTERN));
    public static final Block ORNAMENT_WHITE_LANTERN_BLOCK = new SkinnedLanternBlock(BlockBehaviour.Properties.copy(Blocks.LANTERN));
    public static final Block ORNAMENT_WHITE_SOUL_LANTERN_BLOCK = new SkinnedLanternBlock(BlockBehaviour.Properties.copy(Blocks.SOUL_LANTERN));
    public static final Block ORNAMENT_GRAY_LANTERN_BLOCK = new SkinnedLanternBlock(BlockBehaviour.Properties.copy(Blocks.LANTERN));
    public static final Block ORNAMENT_GRAY_SOUL_LANTERN_BLOCK = new SkinnedLanternBlock(BlockBehaviour.Properties.copy(Blocks.SOUL_LANTERN));
    public static final Block ORNAMENT_LIGHT_GRAY_LANTERN_BLOCK = new SkinnedLanternBlock(BlockBehaviour.Properties.copy(Blocks.LANTERN));
    public static final Block ORNAMENT_LIGHT_GRAY_SOUL_LANTERN_BLOCK = new SkinnedLanternBlock(BlockBehaviour.Properties.copy(Blocks.SOUL_LANTERN));
    public static final Block PRESENT_GREEN_LANTERN_BLOCK = new SkinnedLanternBlock(BlockBehaviour.Properties.copy(Blocks.LANTERN));
    public static final Block PRESENT_GREEN_SOUL_LANTERN_BLOCK = new SkinnedLanternBlock(BlockBehaviour.Properties.copy(Blocks.SOUL_LANTERN));
    public static final Block PRESENT_RED_LANTERN_BLOCK = new SkinnedLanternBlock(BlockBehaviour.Properties.copy(Blocks.LANTERN));
    public static final Block PRESENT_RED_SOUL_LANTERN_BLOCK = new SkinnedLanternBlock(BlockBehaviour.Properties.copy(Blocks.SOUL_LANTERN));
    public static final Block SNOWMAN_LANTERN_BLOCK = new FaceableSkinnedLanternBlock(BlockBehaviour.Properties.copy(Blocks.LANTERN));
    public static final Block SNOWMAN_SOUL_LANTERN_BLOCK = new FaceableSkinnedLanternBlock(BlockBehaviour.Properties.copy(Blocks.SOUL_LANTERN));

//    public static final Block JELLYFISH_LANTERN_BLOCK = new FaceableSkinnedLanternBlock(BlockBehaviour.Properties.copy(Blocks.LANTERN));
//    public static final Block JELLYFISH_SOUL_LANTERN_BLOCK = new FaceableSkinnedLanternBlock(BlockBehaviour.Properties.copy(Blocks.SOUL_LANTERN));
//    public static final Block BLUE_JELLYFISH_LANTERN_BLOCK = new FaceableSkinnedLanternBlock(BlockBehaviour.Properties.copy(Blocks.LANTERN));
//    public static final Block BLUE_JELLYFISH_SOUL_LANTERN_BLOCK = new FaceableSkinnedLanternBlock(BlockBehaviour.Properties.copy(Blocks.SOUL_LANTERN));

    public static final Block HONEY_LANTERN_BLOCK = new SkinnedLanternBlock(BlockBehaviour.Properties.copy(Blocks.LANTERN));
    public static final Block HONEY_SOUL_LANTERN_BLOCK = new SkinnedLanternBlock(BlockBehaviour.Properties.copy(Blocks.SOUL_LANTERN));
    public static final Block SLIME_LANTERN_BLOCK = new FaceableSkinnedLanternBlock(BlockBehaviour.Properties.copy(Blocks.LANTERN));
    public static final Block SLIME_SOUL_LANTERN_BLOCK = new FaceableSkinnedLanternBlock(BlockBehaviour.Properties.copy(Blocks.SOUL_LANTERN));

//    public static final Block TINY_POTATO_LANTERN_BLOCK = new FaceableSkinnedLanternBlock(BlockBehaviour.Properties.copy(Blocks.LANTERN));
//    public static final Block TINY_POTATO_SOUL_LANTERN_BLOCK = new FaceableSkinnedLanternBlock(BlockBehaviour.Properties.copy(Blocks.SOUL_LANTERN));

    public static void registerBlocks(BiConsumer<Block, ResourceLocation> consumer) {
        consumer.accept(PUFFERFISH_LANTERN_BLOCK, LocationLibrary.location(BlockNameLibrary.PUFFERFISH_PREFIX + BlockNameLibrary.LANTERN_SUFFIX));
        consumer.accept(PUFFERFISH_SOUL_LANTERN_BLOCK, LocationLibrary.location(BlockNameLibrary.PUFFERFISH_PREFIX + BlockNameLibrary.SOUL_LANTERN_SUFFIX));
        consumer.accept(ZOMBIE_LANTERN_BLOCK, LocationLibrary.location(BlockNameLibrary.ZOMBIE_PREFIX + BlockNameLibrary.LANTERN_SUFFIX));
        consumer.accept(ZOMBIE_SOUL_LANTERN_BLOCK, LocationLibrary.location(BlockNameLibrary.ZOMBIE_PREFIX + BlockNameLibrary.SOUL_LANTERN_SUFFIX));
        consumer.accept(CREEPER_LANTERN_BLOCK, LocationLibrary.location(BlockNameLibrary.CREEPER_PREFIX + BlockNameLibrary.LANTERN_SUFFIX));
        consumer.accept(CREEPER_SOUL_LANTERN_BLOCK, LocationLibrary.location(BlockNameLibrary.CREEPER_PREFIX + BlockNameLibrary.SOUL_LANTERN_SUFFIX));
        consumer.accept(SKELETON_LANTERN_BLOCK, LocationLibrary.location(BlockNameLibrary.SKELETON_PREFIX + BlockNameLibrary.LANTERN_SUFFIX));
        consumer.accept(SKELETON_SOUL_LANTERN_BLOCK, LocationLibrary.location(BlockNameLibrary.SKELETON_PREFIX + BlockNameLibrary.SOUL_LANTERN_SUFFIX));
        consumer.accept(WITHER_SKELETON_LANTERN_BLOCK, LocationLibrary.location(BlockNameLibrary.WITHER_SKELETON_PREFIX + BlockNameLibrary.LANTERN_SUFFIX));
        consumer.accept(WITHER_SKELETON_SOUL_LANTERN_BLOCK, LocationLibrary.location(BlockNameLibrary.WITHER_SKELETON_PREFIX + BlockNameLibrary.SOUL_LANTERN_SUFFIX));
        consumer.accept(BEE_LANTERN_BLOCK, LocationLibrary.location(BlockNameLibrary.BEE_PREFIX + BlockNameLibrary.LANTERN_SUFFIX));
        consumer.accept(BEE_SOUL_LANTERN_BLOCK, LocationLibrary.location(BlockNameLibrary.BEE_PREFIX + BlockNameLibrary.SOUL_LANTERN_SUFFIX));
        consumer.accept(JACK_O_LANTERN_LANTERN_BLOCK, LocationLibrary.location(BlockNameLibrary.JACK_O_LANTERN_PREFIX + BlockNameLibrary.LANTERN_SUFFIX));
        consumer.accept(JACK_O_LANTERN_SOUL_LANTERN_BLOCK, LocationLibrary.location(BlockNameLibrary.JACK_O_LANTERN_PREFIX + BlockNameLibrary.SOUL_LANTERN_SUFFIX));
        consumer.accept(PAPER_WHITE_LANTERN_BLOCK, LocationLibrary.location(BlockNameLibrary.PAPER_WHITE_PREFIX + BlockNameLibrary.LANTERN_SUFFIX));
        consumer.accept(PAPER_WHITE_SOUL_LANTERN_BLOCK, LocationLibrary.location(BlockNameLibrary.PAPER_WHITE_PREFIX + BlockNameLibrary.SOUL_LANTERN_SUFFIX));

        consumer.accept(GHOST_LANTERN_BLOCK, LocationLibrary.location(BlockNameLibrary.GHOST_PREFIX + BlockNameLibrary.LANTERN_SUFFIX));
        consumer.accept(GHOST_SOUL_LANTERN_BLOCK, LocationLibrary.location(BlockNameLibrary.GHOST_PREFIX + BlockNameLibrary.SOUL_LANTERN_SUFFIX));
        consumer.accept(BLINKY_LANTERN_BLOCK, LocationLibrary.location(BlockNameLibrary.BLINKY_PREFIX + BlockNameLibrary.LANTERN_SUFFIX));
        consumer.accept(BLINKY_SOUL_LANTERN_BLOCK, LocationLibrary.location(BlockNameLibrary.BLINKY_PREFIX + BlockNameLibrary.SOUL_LANTERN_SUFFIX));
        consumer.accept(PINKY_LANTERN_BLOCK, LocationLibrary.location(BlockNameLibrary.PINKY_PREFIX + BlockNameLibrary.LANTERN_SUFFIX));
        consumer.accept(PINKY_SOUL_LANTERN_BLOCK, LocationLibrary.location(BlockNameLibrary.PINKY_PREFIX + BlockNameLibrary.SOUL_LANTERN_SUFFIX));
        consumer.accept(INKY_LANTERN_BLOCK, LocationLibrary.location(BlockNameLibrary.INKY_PREFIX + BlockNameLibrary.LANTERN_SUFFIX));
        consumer.accept(INKY_SOUL_LANTERN_BLOCK, LocationLibrary.location(BlockNameLibrary.INKY_PREFIX + BlockNameLibrary.SOUL_LANTERN_SUFFIX));
        consumer.accept(CLYDE_LANTERN_BLOCK, LocationLibrary.location(BlockNameLibrary.CLYDE_PREFIX + BlockNameLibrary.LANTERN_SUFFIX));
        consumer.accept(CLYDE_SOUL_LANTERN_BLOCK, LocationLibrary.location(BlockNameLibrary.CLYDE_PREFIX + BlockNameLibrary.SOUL_LANTERN_SUFFIX));
        consumer.accept(PACMAN_LANTERN_BLOCK, LocationLibrary.location(BlockNameLibrary.PACMAN_PREFIX + BlockNameLibrary.LANTERN_SUFFIX));
        consumer.accept(PACMAN_SOUL_LANTERN_BLOCK, LocationLibrary.location(BlockNameLibrary.PACMAN_PREFIX + BlockNameLibrary.SOUL_LANTERN_SUFFIX));
        consumer.accept(GUARDIAN_LANTERN_BLOCK, LocationLibrary.location(BlockNameLibrary.GUARDIAN_PREFIX + BlockNameLibrary.LANTERN_SUFFIX));
        consumer.accept(GUARDIAN_SOUL_LANTERN_BLOCK, LocationLibrary.location(BlockNameLibrary.GUARDIAN_PREFIX + BlockNameLibrary.SOUL_LANTERN_SUFFIX));
        consumer.accept(PAPER_YELLOW_LANTERN_BLOCK, LocationLibrary.location(BlockNameLibrary.PAPER_YELLOW_PREFIX + BlockNameLibrary.LANTERN_SUFFIX));
        consumer.accept(PAPER_YELLOW_SOUL_LANTERN_BLOCK, LocationLibrary.location(BlockNameLibrary.PAPER_YELLOW_PREFIX + BlockNameLibrary.SOUL_LANTERN_SUFFIX));
        consumer.accept(PAPER_ORANGE_LANTERN_BLOCK, LocationLibrary.location(BlockNameLibrary.PAPER_ORANGE_PREFIX + BlockNameLibrary.LANTERN_SUFFIX));
        consumer.accept(PAPER_ORANGE_SOUL_LANTERN_BLOCK, LocationLibrary.location(BlockNameLibrary.PAPER_ORANGE_PREFIX + BlockNameLibrary.SOUL_LANTERN_SUFFIX));
        consumer.accept(PAPER_BLUE_LANTERN_BLOCK, LocationLibrary.location(BlockNameLibrary.PAPER_BLUE_PREFIX + BlockNameLibrary.LANTERN_SUFFIX));
        consumer.accept(PAPER_BLUE_SOUL_LANTERN_BLOCK, LocationLibrary.location(BlockNameLibrary.PAPER_BLUE_PREFIX + BlockNameLibrary.SOUL_LANTERN_SUFFIX));
        consumer.accept(PAPER_LIGHT_BLUE_LANTERN_BLOCK, LocationLibrary.location(BlockNameLibrary.PAPER_LIGHT_BLUE_PREFIX + BlockNameLibrary.LANTERN_SUFFIX));
        consumer.accept(PAPER_LIGHT_BLUE_SOUL_LANTERN_BLOCK, LocationLibrary.location(BlockNameLibrary.PAPER_LIGHT_BLUE_PREFIX + BlockNameLibrary.SOUL_LANTERN_SUFFIX));
        consumer.accept(PAPER_CYAN_LANTERN_BLOCK, LocationLibrary.location(BlockNameLibrary.PAPER_CYAN_PREFIX + BlockNameLibrary.LANTERN_SUFFIX));
        consumer.accept(PAPER_CYAN_SOUL_LANTERN_BLOCK, LocationLibrary.location(BlockNameLibrary.PAPER_CYAN_PREFIX + BlockNameLibrary.SOUL_LANTERN_SUFFIX));
        consumer.accept(PAPER_LIME_LANTERN_BLOCK, LocationLibrary.location(BlockNameLibrary.PAPER_LIME_PREFIX + BlockNameLibrary.LANTERN_SUFFIX));
        consumer.accept(PAPER_LIME_SOUL_LANTERN_BLOCK, LocationLibrary.location(BlockNameLibrary.PAPER_LIME_PREFIX + BlockNameLibrary.SOUL_LANTERN_SUFFIX));
        consumer.accept(PAPER_GREEN_LANTERN_BLOCK, LocationLibrary.location(BlockNameLibrary.PAPER_GREEN_PREFIX + BlockNameLibrary.LANTERN_SUFFIX));
        consumer.accept(PAPER_GREEN_SOUL_LANTERN_BLOCK, LocationLibrary.location(BlockNameLibrary.PAPER_GREEN_PREFIX + BlockNameLibrary.SOUL_LANTERN_SUFFIX));
        consumer.accept(PAPER_LANTERN_BLOCK, LocationLibrary.location(BlockNameLibrary.PAPER_PREFIX + BlockNameLibrary.LANTERN_SUFFIX));
        consumer.accept(PAPER_SOUL_LANTERN_BLOCK, LocationLibrary.location(BlockNameLibrary.PAPER_PREFIX + BlockNameLibrary.SOUL_LANTERN_SUFFIX));
        consumer.accept(PAPER_PINK_LANTERN_BLOCK, LocationLibrary.location(BlockNameLibrary.PAPER_PINK_PREFIX + BlockNameLibrary.LANTERN_SUFFIX));
        consumer.accept(PAPER_PINK_SOUL_LANTERN_BLOCK, LocationLibrary.location(BlockNameLibrary.PAPER_PINK_PREFIX + BlockNameLibrary.SOUL_LANTERN_SUFFIX));
        consumer.accept(PAPER_BROWN_LANTERN_BLOCK, LocationLibrary.location(BlockNameLibrary.PAPER_BROWN_PREFIX + BlockNameLibrary.LANTERN_SUFFIX));
        consumer.accept(PAPER_BROWN_SOUL_LANTERN_BLOCK, LocationLibrary.location(BlockNameLibrary.PAPER_BROWN_PREFIX + BlockNameLibrary.SOUL_LANTERN_SUFFIX));
        consumer.accept(PAPER_BLACK_LANTERN_BLOCK, LocationLibrary.location(BlockNameLibrary.PAPER_BLACK_PREFIX + BlockNameLibrary.LANTERN_SUFFIX));
        consumer.accept(PAPER_BLACK_SOUL_LANTERN_BLOCK, LocationLibrary.location(BlockNameLibrary.PAPER_BLACK_PREFIX + BlockNameLibrary.SOUL_LANTERN_SUFFIX));
        consumer.accept(PAPER_GRAY_LANTERN_BLOCK, LocationLibrary.location(BlockNameLibrary.PAPER_GRAY_PREFIX + BlockNameLibrary.LANTERN_SUFFIX));
        consumer.accept(PAPER_GRAY_SOUL_LANTERN_BLOCK, LocationLibrary.location(BlockNameLibrary.PAPER_GRAY_PREFIX + BlockNameLibrary.SOUL_LANTERN_SUFFIX));
        consumer.accept(PAPER_LIGHT_GRAY_LANTERN_BLOCK, LocationLibrary.location(BlockNameLibrary.PAPER_LIGHT_GRAY_PREFIX + BlockNameLibrary.LANTERN_SUFFIX));
        consumer.accept(PAPER_LIGHT_GRAY_SOUL_LANTERN_BLOCK, LocationLibrary.location(BlockNameLibrary.PAPER_LIGHT_GRAY_PREFIX + BlockNameLibrary.SOUL_LANTERN_SUFFIX));
        consumer.accept(PAPER_MAGENTA_LANTERN_BLOCK, LocationLibrary.location(BlockNameLibrary.PAPER_MAGENTA_PREFIX + BlockNameLibrary.LANTERN_SUFFIX));
        consumer.accept(PAPER_MAGENTA_SOUL_LANTERN_BLOCK, LocationLibrary.location(BlockNameLibrary.PAPER_MAGENTA_PREFIX + BlockNameLibrary.SOUL_LANTERN_SUFFIX));
        consumer.accept(PAPER_PURPLE_LANTERN_BLOCK, LocationLibrary.location(BlockNameLibrary.PAPER_PURPLE_PREFIX + BlockNameLibrary.LANTERN_SUFFIX));
        consumer.accept(PAPER_PURPLE_SOUL_LANTERN_BLOCK, LocationLibrary.location(BlockNameLibrary.PAPER_PURPLE_PREFIX + BlockNameLibrary.SOUL_LANTERN_SUFFIX));

        consumer.accept(ORNAMENT_RED_LANTERN_BLOCK, LocationLibrary.location(BlockNameLibrary.ORNAMENT_RED_PREFIX + BlockNameLibrary.LANTERN_SUFFIX));
        consumer.accept(ORNAMENT_RED_SOUL_LANTERN_BLOCK, LocationLibrary.location(BlockNameLibrary.ORNAMENT_RED_PREFIX + BlockNameLibrary.SOUL_LANTERN_SUFFIX));
        consumer.accept(ORNAMENT_BLUE_LANTERN_BLOCK, LocationLibrary.location(BlockNameLibrary.ORNAMENT_BLUE_PREFIX + BlockNameLibrary.LANTERN_SUFFIX));
        consumer.accept(ORNAMENT_BLUE_SOUL_LANTERN_BLOCK, LocationLibrary.location(BlockNameLibrary.ORNAMENT_BLUE_PREFIX + BlockNameLibrary.SOUL_LANTERN_SUFFIX));
        consumer.accept(ORNAMENT_PURPLE_LANTERN_BLOCK, LocationLibrary.location(BlockNameLibrary.ORNAMENT_PURPLE_PREFIX + BlockNameLibrary.LANTERN_SUFFIX));
        consumer.accept(ORNAMENT_PURPLE_SOUL_LANTERN_BLOCK, LocationLibrary.location(BlockNameLibrary.ORNAMENT_PURPLE_PREFIX + BlockNameLibrary.SOUL_LANTERN_SUFFIX));
        consumer.accept(ORNAMENT_LIME_LANTERN_BLOCK, LocationLibrary.location(BlockNameLibrary.ORNAMENT_LIME_PREFIX + BlockNameLibrary.LANTERN_SUFFIX));
        consumer.accept(ORNAMENT_LIME_SOUL_LANTERN_BLOCK, LocationLibrary.location(BlockNameLibrary.ORNAMENT_LIME_PREFIX + BlockNameLibrary.SOUL_LANTERN_SUFFIX));
        consumer.accept(ORNAMENT_MAGENTA_LANTERN_BLOCK, LocationLibrary.location(BlockNameLibrary.ORNAMENT_MAGENTA_PREFIX + BlockNameLibrary.LANTERN_SUFFIX));
        consumer.accept(ORNAMENT_MAGENTA_SOUL_LANTERN_BLOCK, LocationLibrary.location(BlockNameLibrary.ORNAMENT_MAGENTA_PREFIX + BlockNameLibrary.SOUL_LANTERN_SUFFIX));
        consumer.accept(ORNAMENT_YELLOW_LANTERN_BLOCK, LocationLibrary.location(BlockNameLibrary.ORNAMENT_YELLOW_PREFIX + BlockNameLibrary.LANTERN_SUFFIX));
        consumer.accept(ORNAMENT_YELLOW_SOUL_LANTERN_BLOCK, LocationLibrary.location(BlockNameLibrary.ORNAMENT_YELLOW_PREFIX + BlockNameLibrary.SOUL_LANTERN_SUFFIX));
        consumer.accept(ORNAMENT_GREEN_LANTERN_BLOCK, LocationLibrary.location(BlockNameLibrary.ORNAMENT_GREEN_PREFIX + BlockNameLibrary.LANTERN_SUFFIX));
        consumer.accept(ORNAMENT_GREEN_SOUL_LANTERN_BLOCK, LocationLibrary.location(BlockNameLibrary.ORNAMENT_GREEN_PREFIX + BlockNameLibrary.SOUL_LANTERN_SUFFIX));
        consumer.accept(ORNAMENT_LIGHT_BLUE_LANTERN_BLOCK, LocationLibrary.location(BlockNameLibrary.ORNAMENT_LIGHT_BLUE_PREFIX + BlockNameLibrary.LANTERN_SUFFIX));
        consumer.accept(ORNAMENT_LIGHT_BLUE_SOUL_LANTERN_BLOCK, LocationLibrary.location(BlockNameLibrary.ORNAMENT_LIGHT_BLUE_PREFIX + BlockNameLibrary.SOUL_LANTERN_SUFFIX));
        consumer.accept(ORNAMENT_CYAN_LANTERN_BLOCK, LocationLibrary.location(BlockNameLibrary.ORNAMENT_CYAN_PREFIX + BlockNameLibrary.LANTERN_SUFFIX));
        consumer.accept(ORNAMENT_CYAN_SOUL_LANTERN_BLOCK, LocationLibrary.location(BlockNameLibrary.ORNAMENT_CYAN_PREFIX + BlockNameLibrary.SOUL_LANTERN_SUFFIX));
        consumer.accept(ORNAMENT_PINK_LANTERN_BLOCK, LocationLibrary.location(BlockNameLibrary.ORNAMENT_PINK_PREFIX + BlockNameLibrary.LANTERN_SUFFIX));
        consumer.accept(ORNAMENT_PINK_SOUL_LANTERN_BLOCK, LocationLibrary.location(BlockNameLibrary.ORNAMENT_PINK_PREFIX + BlockNameLibrary.SOUL_LANTERN_SUFFIX));
        consumer.accept(ORNAMENT_ORANGE_LANTERN_BLOCK, LocationLibrary.location(BlockNameLibrary.ORNAMENT_ORANGE_PREFIX + BlockNameLibrary.LANTERN_SUFFIX));
        consumer.accept(ORNAMENT_ORANGE_SOUL_LANTERN_BLOCK, LocationLibrary.location(BlockNameLibrary.ORNAMENT_ORANGE_PREFIX + BlockNameLibrary.SOUL_LANTERN_SUFFIX));
        consumer.accept(ORNAMENT_BROWN_LANTERN_BLOCK, LocationLibrary.location(BlockNameLibrary.ORNAMENT_BROWN_PREFIX + BlockNameLibrary.LANTERN_SUFFIX));
        consumer.accept(ORNAMENT_BROWN_SOUL_LANTERN_BLOCK, LocationLibrary.location(BlockNameLibrary.ORNAMENT_BROWN_PREFIX + BlockNameLibrary.SOUL_LANTERN_SUFFIX));
        consumer.accept(ORNAMENT_BLACK_LANTERN_BLOCK, LocationLibrary.location(BlockNameLibrary.ORNAMENT_BLACK_PREFIX + BlockNameLibrary.LANTERN_SUFFIX));
        consumer.accept(ORNAMENT_BLACK_SOUL_LANTERN_BLOCK, LocationLibrary.location(BlockNameLibrary.ORNAMENT_BLACK_PREFIX + BlockNameLibrary.SOUL_LANTERN_SUFFIX));
        consumer.accept(ORNAMENT_WHITE_LANTERN_BLOCK, LocationLibrary.location(BlockNameLibrary.ORNAMENT_WHITE_PREFIX + BlockNameLibrary.LANTERN_SUFFIX));
        consumer.accept(ORNAMENT_WHITE_SOUL_LANTERN_BLOCK, LocationLibrary.location(BlockNameLibrary.ORNAMENT_WHITE_PREFIX + BlockNameLibrary.SOUL_LANTERN_SUFFIX));
        consumer.accept(ORNAMENT_GRAY_LANTERN_BLOCK, LocationLibrary.location(BlockNameLibrary.ORNAMENT_GRAY_PREFIX + BlockNameLibrary.LANTERN_SUFFIX));
        consumer.accept(ORNAMENT_GRAY_SOUL_LANTERN_BLOCK, LocationLibrary.location(BlockNameLibrary.ORNAMENT_GRAY_PREFIX + BlockNameLibrary.SOUL_LANTERN_SUFFIX));
        consumer.accept(ORNAMENT_LIGHT_GRAY_LANTERN_BLOCK, LocationLibrary.location(BlockNameLibrary.ORNAMENT_LIGHT_GRAY_PREFIX + BlockNameLibrary.LANTERN_SUFFIX));
        consumer.accept(ORNAMENT_LIGHT_GRAY_SOUL_LANTERN_BLOCK, LocationLibrary.location(BlockNameLibrary.ORNAMENT_LIGHT_GRAY_PREFIX + BlockNameLibrary.SOUL_LANTERN_SUFFIX));
        consumer.accept(PRESENT_GREEN_LANTERN_BLOCK, LocationLibrary.location(BlockNameLibrary.PRESENT_GREEN_PREFIX + BlockNameLibrary.LANTERN_SUFFIX));
        consumer.accept(PRESENT_GREEN_SOUL_LANTERN_BLOCK, LocationLibrary.location(BlockNameLibrary.PRESENT_GREEN_PREFIX + BlockNameLibrary.SOUL_LANTERN_SUFFIX));
        consumer.accept(PRESENT_RED_LANTERN_BLOCK, LocationLibrary.location(BlockNameLibrary.PRESENT_RED_PREFIX + BlockNameLibrary.LANTERN_SUFFIX));
        consumer.accept(PRESENT_RED_SOUL_LANTERN_BLOCK, LocationLibrary.location(BlockNameLibrary.PRESENT_RED_PREFIX + BlockNameLibrary.SOUL_LANTERN_SUFFIX));
        consumer.accept(SNOWMAN_LANTERN_BLOCK, LocationLibrary.location(BlockNameLibrary.SNOWMAN_PREFIX + BlockNameLibrary.LANTERN_SUFFIX));
        consumer.accept(SNOWMAN_SOUL_LANTERN_BLOCK, LocationLibrary.location(BlockNameLibrary.SNOWMAN_PREFIX + BlockNameLibrary.SOUL_LANTERN_SUFFIX));

        consumer.accept(HONEY_LANTERN_BLOCK, LocationLibrary.location(BlockNameLibrary.HONEY_PREFIX + BlockNameLibrary.LANTERN_SUFFIX));
        consumer.accept(HONEY_SOUL_LANTERN_BLOCK, LocationLibrary.location(BlockNameLibrary.HONEY_PREFIX + BlockNameLibrary.SOUL_LANTERN_SUFFIX));
        consumer.accept(SLIME_LANTERN_BLOCK, LocationLibrary.location(BlockNameLibrary.SLIME_PREFIX + BlockNameLibrary.LANTERN_SUFFIX));
        consumer.accept(SLIME_SOUL_LANTERN_BLOCK, LocationLibrary.location(BlockNameLibrary.SLIME_PREFIX + BlockNameLibrary.SOUL_LANTERN_SUFFIX));
    }

    public static void registerBlockItems(BiConsumer<Item, ResourceLocation> consumer) {
        Item.Properties props = new Item.Properties();
        Item.Properties decorateProps = props.tab(Services.PLATFORM.getSkinnedTab());
        consumer.accept(new BlockItem(PUFFERFISH_LANTERN_BLOCK, decorateProps), Registry.BLOCK.getKey(PUFFERFISH_LANTERN_BLOCK));
        consumer.accept(new BlockItem(PUFFERFISH_SOUL_LANTERN_BLOCK, decorateProps), Registry.BLOCK.getKey(PUFFERFISH_SOUL_LANTERN_BLOCK));
        consumer.accept(new BlockItem(ZOMBIE_LANTERN_BLOCK, decorateProps), Registry.BLOCK.getKey(ZOMBIE_LANTERN_BLOCK));
        consumer.accept(new BlockItem(ZOMBIE_SOUL_LANTERN_BLOCK, decorateProps), Registry.BLOCK.getKey(ZOMBIE_SOUL_LANTERN_BLOCK));
        consumer.accept(new BlockItem(CREEPER_LANTERN_BLOCK, decorateProps), Registry.BLOCK.getKey(CREEPER_LANTERN_BLOCK));
        consumer.accept(new BlockItem(CREEPER_SOUL_LANTERN_BLOCK, decorateProps), Registry.BLOCK.getKey(CREEPER_SOUL_LANTERN_BLOCK));
        consumer.accept(new BlockItem(SKELETON_LANTERN_BLOCK, decorateProps), Registry.BLOCK.getKey(SKELETON_LANTERN_BLOCK));
        consumer.accept(new BlockItem(SKELETON_SOUL_LANTERN_BLOCK, decorateProps), Registry.BLOCK.getKey(SKELETON_SOUL_LANTERN_BLOCK));
        consumer.accept(new BlockItem(WITHER_SKELETON_LANTERN_BLOCK, decorateProps), Registry.BLOCK.getKey(WITHER_SKELETON_LANTERN_BLOCK));
        consumer.accept(new BlockItem(WITHER_SKELETON_SOUL_LANTERN_BLOCK, decorateProps), Registry.BLOCK.getKey(WITHER_SKELETON_SOUL_LANTERN_BLOCK));
        consumer.accept(new BlockItem(BEE_LANTERN_BLOCK, decorateProps), Registry.BLOCK.getKey(BEE_LANTERN_BLOCK));
        consumer.accept(new BlockItem(BEE_SOUL_LANTERN_BLOCK, decorateProps), Registry.BLOCK.getKey(BEE_SOUL_LANTERN_BLOCK));
        consumer.accept(new BlockItem(JACK_O_LANTERN_LANTERN_BLOCK, decorateProps), Registry.BLOCK.getKey(JACK_O_LANTERN_LANTERN_BLOCK));
        consumer.accept(new BlockItem(JACK_O_LANTERN_SOUL_LANTERN_BLOCK, decorateProps), Registry.BLOCK.getKey(JACK_O_LANTERN_SOUL_LANTERN_BLOCK));
        consumer.accept(new BlockItem(PAPER_WHITE_LANTERN_BLOCK, decorateProps), Registry.BLOCK.getKey(PAPER_WHITE_LANTERN_BLOCK));
        consumer.accept(new BlockItem(PAPER_WHITE_SOUL_LANTERN_BLOCK, decorateProps), Registry.BLOCK.getKey(PAPER_WHITE_SOUL_LANTERN_BLOCK));
        consumer.accept(new BlockItem(GHOST_LANTERN_BLOCK, decorateProps), Registry.BLOCK.getKey(GHOST_LANTERN_BLOCK));
        consumer.accept(new BlockItem(GHOST_SOUL_LANTERN_BLOCK, decorateProps), Registry.BLOCK.getKey(GHOST_SOUL_LANTERN_BLOCK));
        consumer.accept(new BlockItem(BLINKY_LANTERN_BLOCK, decorateProps), Registry.BLOCK.getKey(BLINKY_LANTERN_BLOCK));
        consumer.accept(new BlockItem(BLINKY_SOUL_LANTERN_BLOCK, decorateProps), Registry.BLOCK.getKey(BLINKY_SOUL_LANTERN_BLOCK));
        consumer.accept(new BlockItem(PINKY_LANTERN_BLOCK, decorateProps), Registry.BLOCK.getKey(PINKY_LANTERN_BLOCK));
        consumer.accept(new BlockItem(PINKY_SOUL_LANTERN_BLOCK, decorateProps), Registry.BLOCK.getKey(PINKY_SOUL_LANTERN_BLOCK));
        consumer.accept(new BlockItem(INKY_LANTERN_BLOCK, decorateProps), Registry.BLOCK.getKey(INKY_LANTERN_BLOCK));
        consumer.accept(new BlockItem(INKY_SOUL_LANTERN_BLOCK, decorateProps), Registry.BLOCK.getKey(INKY_SOUL_LANTERN_BLOCK));
        consumer.accept(new BlockItem(CLYDE_LANTERN_BLOCK, decorateProps), Registry.BLOCK.getKey(CLYDE_LANTERN_BLOCK));
        consumer.accept(new BlockItem(CLYDE_SOUL_LANTERN_BLOCK, decorateProps), Registry.BLOCK.getKey(CLYDE_SOUL_LANTERN_BLOCK));
        consumer.accept(new BlockItem(PACMAN_LANTERN_BLOCK, decorateProps), Registry.BLOCK.getKey(PACMAN_LANTERN_BLOCK));
        consumer.accept(new BlockItem(PACMAN_SOUL_LANTERN_BLOCK, decorateProps), Registry.BLOCK.getKey(PACMAN_SOUL_LANTERN_BLOCK));
        consumer.accept(new BlockItem(GUARDIAN_LANTERN_BLOCK, decorateProps), Registry.BLOCK.getKey(GUARDIAN_LANTERN_BLOCK));
        consumer.accept(new BlockItem(GUARDIAN_SOUL_LANTERN_BLOCK, decorateProps), Registry.BLOCK.getKey(GUARDIAN_SOUL_LANTERN_BLOCK));
        consumer.accept(new BlockItem(PAPER_YELLOW_LANTERN_BLOCK, decorateProps), Registry.BLOCK.getKey(PAPER_YELLOW_LANTERN_BLOCK));
        consumer.accept(new BlockItem(PAPER_YELLOW_SOUL_LANTERN_BLOCK, decorateProps), Registry.BLOCK.getKey(PAPER_YELLOW_SOUL_LANTERN_BLOCK));
        consumer.accept(new BlockItem(PAPER_ORANGE_LANTERN_BLOCK, decorateProps), Registry.BLOCK.getKey(PAPER_ORANGE_LANTERN_BLOCK));
        consumer.accept(new BlockItem(PAPER_ORANGE_SOUL_LANTERN_BLOCK, decorateProps), Registry.BLOCK.getKey(PAPER_ORANGE_SOUL_LANTERN_BLOCK));
        consumer.accept(new BlockItem(PAPER_BLUE_LANTERN_BLOCK, decorateProps), Registry.BLOCK.getKey(PAPER_BLUE_LANTERN_BLOCK));
        consumer.accept(new BlockItem(PAPER_BLUE_SOUL_LANTERN_BLOCK, decorateProps), Registry.BLOCK.getKey(PAPER_BLUE_SOUL_LANTERN_BLOCK));
        consumer.accept(new BlockItem(PAPER_LIGHT_BLUE_LANTERN_BLOCK, decorateProps), Registry.BLOCK.getKey(PAPER_LIGHT_BLUE_LANTERN_BLOCK));
        consumer.accept(new BlockItem(PAPER_LIGHT_BLUE_SOUL_LANTERN_BLOCK, decorateProps), Registry.BLOCK.getKey(PAPER_LIGHT_BLUE_SOUL_LANTERN_BLOCK));
        consumer.accept(new BlockItem(PAPER_CYAN_LANTERN_BLOCK, decorateProps), Registry.BLOCK.getKey(PAPER_CYAN_LANTERN_BLOCK));
        consumer.accept(new BlockItem(PAPER_CYAN_SOUL_LANTERN_BLOCK, decorateProps), Registry.BLOCK.getKey(PAPER_CYAN_SOUL_LANTERN_BLOCK));
        consumer.accept(new BlockItem(PAPER_LIME_LANTERN_BLOCK, decorateProps), Registry.BLOCK.getKey(PAPER_LIME_LANTERN_BLOCK));
        consumer.accept(new BlockItem(PAPER_LIME_SOUL_LANTERN_BLOCK, decorateProps), Registry.BLOCK.getKey(PAPER_LIME_SOUL_LANTERN_BLOCK));
        consumer.accept(new BlockItem(PAPER_GREEN_LANTERN_BLOCK, decorateProps), Registry.BLOCK.getKey(PAPER_GREEN_LANTERN_BLOCK));
        consumer.accept(new BlockItem(PAPER_GREEN_SOUL_LANTERN_BLOCK, decorateProps), Registry.BLOCK.getKey(PAPER_GREEN_SOUL_LANTERN_BLOCK));
        consumer.accept(new BlockItem(PAPER_LANTERN_BLOCK, decorateProps), Registry.BLOCK.getKey(PAPER_LANTERN_BLOCK));
        consumer.accept(new BlockItem(PAPER_SOUL_LANTERN_BLOCK, decorateProps), Registry.BLOCK.getKey(PAPER_SOUL_LANTERN_BLOCK));
        consumer.accept(new BlockItem(PAPER_PINK_LANTERN_BLOCK, decorateProps), Registry.BLOCK.getKey(PAPER_PINK_LANTERN_BLOCK));
        consumer.accept(new BlockItem(PAPER_PINK_SOUL_LANTERN_BLOCK, decorateProps), Registry.BLOCK.getKey(PAPER_PINK_SOUL_LANTERN_BLOCK));
        consumer.accept(new BlockItem(PAPER_BROWN_LANTERN_BLOCK, decorateProps), Registry.BLOCK.getKey(PAPER_BROWN_LANTERN_BLOCK));
        consumer.accept(new BlockItem(PAPER_BROWN_SOUL_LANTERN_BLOCK, decorateProps), Registry.BLOCK.getKey(PAPER_BROWN_SOUL_LANTERN_BLOCK));
        consumer.accept(new BlockItem(PAPER_BLACK_LANTERN_BLOCK, decorateProps), Registry.BLOCK.getKey(PAPER_BLACK_LANTERN_BLOCK));
        consumer.accept(new BlockItem(PAPER_BLACK_SOUL_LANTERN_BLOCK, decorateProps), Registry.BLOCK.getKey(PAPER_BLACK_SOUL_LANTERN_BLOCK));
        consumer.accept(new BlockItem(PAPER_GRAY_LANTERN_BLOCK, decorateProps), Registry.BLOCK.getKey(PAPER_GRAY_LANTERN_BLOCK));
        consumer.accept(new BlockItem(PAPER_GRAY_SOUL_LANTERN_BLOCK, decorateProps), Registry.BLOCK.getKey(PAPER_GRAY_SOUL_LANTERN_BLOCK));
        consumer.accept(new BlockItem(PAPER_LIGHT_GRAY_LANTERN_BLOCK, decorateProps), Registry.BLOCK.getKey(PAPER_LIGHT_GRAY_LANTERN_BLOCK));
        consumer.accept(new BlockItem(PAPER_LIGHT_GRAY_SOUL_LANTERN_BLOCK, decorateProps), Registry.BLOCK.getKey(PAPER_LIGHT_GRAY_SOUL_LANTERN_BLOCK));
        consumer.accept(new BlockItem(PAPER_MAGENTA_LANTERN_BLOCK, decorateProps), Registry.BLOCK.getKey(PAPER_MAGENTA_LANTERN_BLOCK));
        consumer.accept(new BlockItem(PAPER_MAGENTA_SOUL_LANTERN_BLOCK, decorateProps), Registry.BLOCK.getKey(PAPER_MAGENTA_SOUL_LANTERN_BLOCK));
        consumer.accept(new BlockItem(PAPER_PURPLE_LANTERN_BLOCK, decorateProps), Registry.BLOCK.getKey(PAPER_PURPLE_LANTERN_BLOCK));
        consumer.accept(new BlockItem(PAPER_PURPLE_SOUL_LANTERN_BLOCK, decorateProps), Registry.BLOCK.getKey(PAPER_PURPLE_SOUL_LANTERN_BLOCK));

        consumer.accept(new BlockItem(ORNAMENT_RED_LANTERN_BLOCK, decorateProps), Registry.BLOCK.getKey(ORNAMENT_RED_LANTERN_BLOCK));
        consumer.accept(new BlockItem(ORNAMENT_RED_SOUL_LANTERN_BLOCK, decorateProps), Registry.BLOCK.getKey(ORNAMENT_RED_SOUL_LANTERN_BLOCK));
        consumer.accept(new BlockItem(ORNAMENT_BLUE_LANTERN_BLOCK, decorateProps), Registry.BLOCK.getKey(ORNAMENT_BLUE_LANTERN_BLOCK));
        consumer.accept(new BlockItem(ORNAMENT_BLUE_SOUL_LANTERN_BLOCK, decorateProps), Registry.BLOCK.getKey(ORNAMENT_BLUE_SOUL_LANTERN_BLOCK));
        consumer.accept(new BlockItem(ORNAMENT_PURPLE_LANTERN_BLOCK, decorateProps), Registry.BLOCK.getKey(ORNAMENT_PURPLE_LANTERN_BLOCK));
        consumer.accept(new BlockItem(ORNAMENT_PURPLE_SOUL_LANTERN_BLOCK, decorateProps), Registry.BLOCK.getKey(ORNAMENT_PURPLE_SOUL_LANTERN_BLOCK));
        consumer.accept(new BlockItem(ORNAMENT_LIME_LANTERN_BLOCK, decorateProps), Registry.BLOCK.getKey(ORNAMENT_LIME_LANTERN_BLOCK));
        consumer.accept(new BlockItem(ORNAMENT_LIME_SOUL_LANTERN_BLOCK, decorateProps), Registry.BLOCK.getKey(ORNAMENT_LIME_SOUL_LANTERN_BLOCK));
        consumer.accept(new BlockItem(ORNAMENT_MAGENTA_LANTERN_BLOCK, decorateProps), Registry.BLOCK.getKey(ORNAMENT_MAGENTA_LANTERN_BLOCK));
        consumer.accept(new BlockItem(ORNAMENT_MAGENTA_SOUL_LANTERN_BLOCK, decorateProps), Registry.BLOCK.getKey(ORNAMENT_MAGENTA_SOUL_LANTERN_BLOCK));
        consumer.accept(new BlockItem(ORNAMENT_YELLOW_LANTERN_BLOCK, decorateProps), Registry.BLOCK.getKey(ORNAMENT_YELLOW_LANTERN_BLOCK));
        consumer.accept(new BlockItem(ORNAMENT_YELLOW_SOUL_LANTERN_BLOCK, decorateProps), Registry.BLOCK.getKey(ORNAMENT_YELLOW_SOUL_LANTERN_BLOCK));
        consumer.accept(new BlockItem(ORNAMENT_GREEN_LANTERN_BLOCK, decorateProps), Registry.BLOCK.getKey(ORNAMENT_GREEN_LANTERN_BLOCK));
        consumer.accept(new BlockItem(ORNAMENT_GREEN_SOUL_LANTERN_BLOCK, decorateProps), Registry.BLOCK.getKey(ORNAMENT_GREEN_SOUL_LANTERN_BLOCK));
        consumer.accept(new BlockItem(ORNAMENT_LIGHT_BLUE_LANTERN_BLOCK, decorateProps), Registry.BLOCK.getKey(ORNAMENT_LIGHT_BLUE_LANTERN_BLOCK));
        consumer.accept(new BlockItem(ORNAMENT_LIGHT_BLUE_SOUL_LANTERN_BLOCK, decorateProps), Registry.BLOCK.getKey(ORNAMENT_LIGHT_BLUE_SOUL_LANTERN_BLOCK));
        consumer.accept(new BlockItem(ORNAMENT_CYAN_LANTERN_BLOCK, decorateProps), Registry.BLOCK.getKey(ORNAMENT_CYAN_LANTERN_BLOCK));
        consumer.accept(new BlockItem(ORNAMENT_CYAN_SOUL_LANTERN_BLOCK, decorateProps), Registry.BLOCK.getKey(ORNAMENT_CYAN_SOUL_LANTERN_BLOCK));
        consumer.accept(new BlockItem(ORNAMENT_PINK_LANTERN_BLOCK, decorateProps), Registry.BLOCK.getKey(ORNAMENT_PINK_LANTERN_BLOCK));
        consumer.accept(new BlockItem(ORNAMENT_PINK_SOUL_LANTERN_BLOCK, decorateProps), Registry.BLOCK.getKey(ORNAMENT_PINK_SOUL_LANTERN_BLOCK));
        consumer.accept(new BlockItem(ORNAMENT_ORANGE_LANTERN_BLOCK, decorateProps), Registry.BLOCK.getKey(ORNAMENT_ORANGE_LANTERN_BLOCK));
        consumer.accept(new BlockItem(ORNAMENT_ORANGE_SOUL_LANTERN_BLOCK, decorateProps), Registry.BLOCK.getKey(ORNAMENT_ORANGE_SOUL_LANTERN_BLOCK));
        consumer.accept(new BlockItem(ORNAMENT_BROWN_LANTERN_BLOCK, decorateProps), Registry.BLOCK.getKey(ORNAMENT_BROWN_LANTERN_BLOCK));
        consumer.accept(new BlockItem(ORNAMENT_BROWN_SOUL_LANTERN_BLOCK, decorateProps), Registry.BLOCK.getKey(ORNAMENT_BROWN_SOUL_LANTERN_BLOCK));
        consumer.accept(new BlockItem(ORNAMENT_BLACK_LANTERN_BLOCK, decorateProps), Registry.BLOCK.getKey(ORNAMENT_BLACK_LANTERN_BLOCK));
        consumer.accept(new BlockItem(ORNAMENT_BLACK_SOUL_LANTERN_BLOCK, decorateProps), Registry.BLOCK.getKey(ORNAMENT_BLACK_SOUL_LANTERN_BLOCK));
        consumer.accept(new BlockItem(ORNAMENT_WHITE_LANTERN_BLOCK, decorateProps), Registry.BLOCK.getKey(ORNAMENT_WHITE_LANTERN_BLOCK));
        consumer.accept(new BlockItem(ORNAMENT_WHITE_SOUL_LANTERN_BLOCK, decorateProps), Registry.BLOCK.getKey(ORNAMENT_WHITE_SOUL_LANTERN_BLOCK));
        consumer.accept(new BlockItem(ORNAMENT_GRAY_LANTERN_BLOCK, decorateProps), Registry.BLOCK.getKey(ORNAMENT_GRAY_LANTERN_BLOCK));
        consumer.accept(new BlockItem(ORNAMENT_GRAY_SOUL_LANTERN_BLOCK, decorateProps), Registry.BLOCK.getKey(ORNAMENT_GRAY_SOUL_LANTERN_BLOCK));
        consumer.accept(new BlockItem(ORNAMENT_LIGHT_GRAY_LANTERN_BLOCK, decorateProps), Registry.BLOCK.getKey(ORNAMENT_LIGHT_GRAY_LANTERN_BLOCK));
        consumer.accept(new BlockItem(ORNAMENT_LIGHT_GRAY_SOUL_LANTERN_BLOCK, decorateProps), Registry.BLOCK.getKey(ORNAMENT_LIGHT_GRAY_SOUL_LANTERN_BLOCK));
        consumer.accept(new BlockItem(PRESENT_GREEN_LANTERN_BLOCK, decorateProps), Registry.BLOCK.getKey(PRESENT_GREEN_LANTERN_BLOCK));
        consumer.accept(new BlockItem(PRESENT_GREEN_SOUL_LANTERN_BLOCK, decorateProps), Registry.BLOCK.getKey(PRESENT_GREEN_SOUL_LANTERN_BLOCK));
        consumer.accept(new BlockItem(PRESENT_RED_LANTERN_BLOCK, decorateProps), Registry.BLOCK.getKey(PRESENT_RED_LANTERN_BLOCK));
        consumer.accept(new BlockItem(PRESENT_RED_SOUL_LANTERN_BLOCK, decorateProps), Registry.BLOCK.getKey(PRESENT_RED_SOUL_LANTERN_BLOCK));
        consumer.accept(new BlockItem(SNOWMAN_LANTERN_BLOCK, decorateProps), Registry.BLOCK.getKey(SNOWMAN_LANTERN_BLOCK));
        consumer.accept(new BlockItem(SNOWMAN_SOUL_LANTERN_BLOCK, decorateProps), Registry.BLOCK.getKey(SNOWMAN_SOUL_LANTERN_BLOCK));

//        if(Services.PLATFORM.isModLoaded("jellyfishing")) {
//            //er
//        }

        consumer.accept(new BlockItem(HONEY_LANTERN_BLOCK, decorateProps), Registry.BLOCK.getKey(HONEY_LANTERN_BLOCK));
        consumer.accept(new BlockItem(HONEY_SOUL_LANTERN_BLOCK, decorateProps), Registry.BLOCK.getKey(HONEY_SOUL_LANTERN_BLOCK));
        consumer.accept(new BlockItem(SLIME_LANTERN_BLOCK, decorateProps), Registry.BLOCK.getKey(SLIME_LANTERN_BLOCK));
        consumer.accept(new BlockItem(SLIME_SOUL_LANTERN_BLOCK, decorateProps), Registry.BLOCK.getKey(SLIME_SOUL_LANTERN_BLOCK));

//        if(Services.PLATFORM.isModLoaded("botania")) {
//            //er
//        }
    }
}